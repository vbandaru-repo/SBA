package com.abs.common;

import java.io.File;
import java.io.FileInputStream;
import java.util.LinkedHashMap;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class TestDataUtil {
	
	public LinkedHashMap<Integer,LinkedHashMap<String, String>> readMultiTestData(String targetTest, String strFilePath,String strSheetName)
	{
		FileInputStream objFileInputStream = null;
		String colKey = null;
		String strValue = null;
		XSSFWorkbook objWorkBook = null;
		Sheet objSheet = null;
		LinkedHashMap<String, String> recordMap = new LinkedHashMap<String, String>();
		LinkedHashMap<Integer,LinkedHashMap<String, String>> tableMap = new LinkedHashMap<Integer,LinkedHashMap<String, String>>();
		Cell objCellColName = null;
		Cell objCellColValue = null;
		try
		{	
			objFileInputStream = new FileInputStream(new File(strFilePath));
	        /*if(strFilePath.toLowerCase().endsWith(".xlsx"))
	        {
	        	//***xlsx work book object creation
	        	objWorkBook = new XSSFWorkbook(strFilePath);
	        }*/
	        //else if(strFilePath.toLowerCase().endsWith(".xls"))
	        //{
	              //***xls file workbook object creation  
	        	  objWorkBook = new XSSFWorkbook(objFileInputStream);
	       // }
	        
	            //***sheet object creation
	        objSheet = objWorkBook.getSheet(strSheetName);
	        int intRowCount = objSheet.getLastRowNum();
			Row firstRow = objSheet.getRow(0);
			int rowKey = 1;
			String currentTest;
			boolean targetTestFound = false;
	        for(int rowIndex=0; rowIndex<intRowCount; rowIndex++)
			{
	        	Row currentRow = objSheet.getRow(rowIndex);
				objCellColName = currentRow.getCell(0);
				currentTest = readCellValue(objCellColName);
		        //***Getting used range Row count from the current sheet
	        	while(currentTest.equalsIgnoreCase(targetTest))	
	        	{	  
	        			targetTestFound = true;
		        		int targetDataRow = rowIndex;
						Row row = objSheet.getRow(targetDataRow);
		
						int colCount = row.getLastCellNum();
						for(int colIndex = 1;colIndex<colCount;colIndex++)
						{
							objCellColName = firstRow.getCell(colIndex);
							colKey = readCellValue(objCellColName);
			        		
			        		objCellColValue = row.getCell(colIndex);
			        		strValue = readCellValue(objCellColValue);
			        		recordMap.put(colKey, strValue);
							}
						tableMap.put(rowKey, (LinkedHashMap<String, String>)recordMap.clone());
						rowKey++;
						recordMap.clear();
						currentRow = objSheet.getRow(++rowIndex);
						objCellColName = currentRow.getCell(0);
						currentTest = readCellValue(objCellColName);
					}
	            if(targetTestFound) break;
	        	}
			
			objFileInputStream.close();
			objWorkBook.close();
		}
		catch (Exception e) {
			System.out.println(e.getMessage());
		}
		finally
		{
			//objFileInputStream.close();
			//objWorkBook.close();
		}
		return tableMap;
	}
	
	
	public String readCellValue(Cell cell)
	{
		String strResult = "";
		try {
	    switch (cell.getCellType())
	    {
	    case Cell.CELL_TYPE_BLANK:
	    	strResult = "";
	    	break;
	    case Cell.CELL_TYPE_BOOLEAN:
	    	strResult = String.valueOf(cell.getBooleanCellValue());
	    	break;
	    case Cell.CELL_TYPE_ERROR:
	    	strResult = String.valueOf(cell.getErrorCellValue());
	    	break;
	    case Cell.CELL_TYPE_NUMERIC:
	    	strResult = String.valueOf(cell.getNumericCellValue());
	    	break;
	    case Cell.CELL_TYPE_STRING:
	    	strResult = cell.getStringCellValue();
	    	break;
	    default:
	    	strResult = "";
	    }
		}catch(Exception e) 
		{
			System.out.println(e.getMessage());
		}
		return strResult;
	}

}
